version: 0.2
env:
  variables:
    AWS_CONTAINER_NAME: ${aws_container_name}
    AWS_CONTAINER_PORT: ${aws_container_port}
    AWS_DESIRED_COUNT: ${aws_desired_count}
    AWS_ECS_CLUSTER: ${aws_ecs_cluster}
    AWS_SECURITY_GROUP: "${aws_security_group}"
    AWS_SERVICE_NAME: ${aws_service_name}
    AWS_STREAM_PREFIX: ${aws_stream_prefix}
    AWS_SUBNET: "${aws_subnet}"
    AWS_TARGET_GROUP_ARN: ${aws_target_group_arn}
    DEPLOYMENT_MAX_PERCENT: ${deployment_max_percent}
    DEPLOYMENT_MIN_HEALTHY_PERCENT: ${deployment_min_healthy_percent}
    ECS_IMAGE_PULL_BEHAVIOR: ${ecs_image_pull_behavior}
    TASK_ROLE_ARN: ${task_role_arn}
    application_name: ${repository_name}
    environment: ${environment}
    image_repo: ${image_repo} 
    image_repo_name: ${image_repo_name} 
    APPDEMO_BACKEND: ${APPDEMO_BACKEND}
    APPDEMO_FRONTEND: ${APPDEMO_FRONTEND}
    AUTHENTICATION_ADMINFRONTEND: ${AUTHENTICATION_ADMINFRONTEND}
    AUTHENTICATION_BACKEND: ${AUTHENTICATION_BACKEND}
    BASEDATATABLES_BACKEND: ${BASEDATATABLES_BACKEND}
    BASEDATATABLES_FRONTEND: ${BASEDATATABLES_FRONTEND}
    CDN: ${CDN}
    CRON_ADMINFRONTEND: ${CRON_ADMINFRONTEND}
    CRON_BACKEND: ${CRON_BACKEND}
    DEMAND_PRODUCT_FEATURES_BACKEND: ${DEMAND_PRODUCT_FEATURES_BACKEND}
    DEMAND_PRODUCT_FEATURES_FRONTEND: ${DEMAND_PRODUCT_FEATURES_FRONTEND}
    FORECAST_BACKEND: ${FORECAST_BACKEND}    
    FORECAST_FRONTEND: ${FORECAST_FRONTEND}  
    KERINGAI_BACKEND: ${KERINGAI_BACKEND}   
    KERINGAI_FRONTEND: ${KERINGAI_FRONTEND}  
    MAINFRONT_FRONTEND: ${MAINFRONT_FRONTEND}
    NOTIFICATION_ADMINFRONTEND: ${NOTIFICATION_ADMINFRONTEND}
    NOTIFICATION_BACKEND: ${NOTIFICATION_BACKEND}
    SALESWINDOWS_BACKEND: ${SALESWINDOWS_BACKEND}
    SALESWINDOWS_FRONTEND: ${SALESWINDOWS_FRONTEND}
    SEASONALITY_BACKEND: ${SEASONALITY_BACKEND} 
    SEASONALITY_FRONTEND: ${SEASONALITY_FRONTEND}
    SO99_BACKEND: ${SO99_BACKEND}
    SO99_FRONTEND: ${SO99_FRONTEND}
    STORAGE_BACKEND: ${STORAGE_BACKEND}
    USERPREFERENCES_BACKEND: ${USERPREFERENCES_BACKEND}

  exported-variables:
    - environment
    - APPDEMO_BACKEND
    - APPDEMO_FRONTEND
    - AUTHENTICATION_ADMINFRONTEND
    - AUTHENTICATION_BACKEND
    - BASEDATATABLES_BACKEND
    - BASEDATATABLES_FRONTEND
    - CDN
    - CRON_ADMINFRONTEND
    - CRON_BACKEND
    - DEMAND_PRODUCT_FEATURES_BACKEND
    - DEMAND_PRODUCT_FEATURES_FRONTEND
    - FORECAST_BACKEND
    - FORECAST_FRONTEND
    - KERINGAI_BACKEND
    - KERINGAI_FRONTEND
    - MAINFRONT_FRONTEND
    - NOTIFICATION_ADMINFRONTEND
    - NOTIFICATION_BACKEND
    - SALESWINDOWS_BACKEND
    - SALESWINDOWS_FRONTEND
    - SEASONALITY_BACKEND
    - SEASONALITY_FRONTEND
    - SO99_BACKEND
    - SO99_FRONTEND
    - STORAGE_BACKEND
    - USERPREFERENCES_BACKEND
phases:
  build:
    commands:
      - echo "[ECHO] Running using sbt publish to compile STEP at $(date)"
      - git clone https://github.com/vcrini/aws-utilities  -b 1.0   --depth=1 utilities
      - app_image_version=v`grep -Po '(?<=^version=).+' build.txt`
      - app1_image_version=$app_image_version
      - app_repo=`utilities/ecr_image_check.sh $image_repo $application_name $app_image_version skip_ecr_check`
      - app_image_version=`utilities/remove_snapshot.sh $app_image_version` 
      - tag=`cat tag`
      - is_app1=`grep -c 'app1' docker-compose.yml || true`
      - |-
        if [ "$is_app1" -gt 0 ]; then
          echo "app1 is present"
          app1_repo=`utilities/ecr_image_check.sh $image_repo $application_name-app1 $app1_image_version skip_ecr_check`
          app1_image_version=`utilities/remove_snapshot.sh $app1_image_version` 
        fi
      - CMD="utilities/ecs-cli compose --cluster $AWS_ECS_CLUSTER --project-name $AWS_SERVICE_NAME$version_count --file docker-compose.yml --file docker-compose.aws.yml --ecs-params ecs-params.yml service up --deployment-max-percent $DEPLOYMENT_MAX_PERCENT --deployment-min-healthy-percent $DEPLOYMENT_MIN_HEALTHY_PERCENT  --target-group-arn $AWS_TARGET_GROUP_ARN --container-name $AWS_CONTAINER_NAME --container-port $AWS_CONTAINER_PORT --force-deployment --tags $tag"
      - echo $CMD
      - exec $CMD
      - |-
        if [ "$AWS_DESIRED_COUNT" -gt 0 ]; then
          CMD="utilities/ecs-cli compose --cluster $AWS_ECS_CLUSTER --project-name $AWS_SERVICE_NAME$version_count service scale --deployment-max-percent $DEPLOYMENT_MAX_PERCENT --deployment-min-healthy-percent $DEPLOYMENT_MIN_HEALTHY_PERCENT $AWS_DESIRED_COUNT"
          echo $CMD
          exec $CMD
        fi
